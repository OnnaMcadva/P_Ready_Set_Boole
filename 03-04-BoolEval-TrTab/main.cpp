#include "Logic.hpp"
#include <iostream>

int main() {
    PostfixEvaluator evaluator;
    TruthTableGenerator tableGen;

    std::cout << "\nüíª************ Boolean evaluation ************üíª\n";

    std::string formulas[] = {
        "10&",
        "10|",
        "11>",
        "10=",
        "10|1&",
        "1011||=",
        "1!",
        "10^",
        "10>!",
    };

    std::string schemes[] {
        "{ ‚ä§ ‚àß ‚ä• }",
        "{ ‚ä§ ‚à® ‚ä• }",
        "{ ‚ä§ ‚áí ‚ä§ }",
        "{ ‚ä§ ‚áî ‚ä• }",
        "{ (T ‚à® ‚ä•) ‚àß T) }",
        "{ T ‚Üî (‚ä• ‚à® (T ‚à® T)) }",
        "{ ¬¨ ‚ä§ }",
        "{ ‚ä§ ‚äï ‚ä• }",
        "{ ¬¨ (‚ä§ ‚áí ‚ä•) }",
    };

    for (int i = 0; i < 9; ++i) {
        std::cout << "Test " << (i + 1) << ": " << formulas[i] << std::endl;
        std::cout << "Scheme: " << schemes[i] << std::endl;
        bool result = evaluator.evalFormula(formulas[i]);
        std::cout << "‚ú® Result: " << (result ? "true" : "false") << " ‚ú®\n";
        std::cout << "--------------------------\n";
    }

    std::cout << "\nüíª************ Truth table ************üíª\n";
    std::cout << "‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°\n" << "{ AB&C| }\n";
    std::string formula = "AB&C|";
    tableGen.printTruthTable(formula);
    std::cout << "‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°\n" << "{ AB> }\n";
    formula = "AB>";
    tableGen.printTruthTable(formula);
    std::cout << "‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°\n" << "{ AB&A> }\n";
    formula = "AB&A>";
    tableGen.printTruthTable(formula);
    std::cout << "‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°\n" << "\n";
}